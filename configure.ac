dnl $Id: configure.ac,v 1.97 2005/07/15 20:25:06 ensc Exp $

dnl Copyright (C) 2003,2004 Enrico Scholz <enrico.scholz@informatik.tu-chemnitz.de>
dnl  
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2, or (at your option)
dnl any later version.
dnl  
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl  
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
dnl  
dnl  
dnl As a special exception to the GNU General Public License, if you
dnl distribute this file as part of a program that contains a configuration
dnl script generated by Autoconf, you may include it under the same
dnl distribution terms that you use for the rest of that program.
dnl  

AC_PREREQ(2.57)
AC_INIT(util-vserver, 0.30.208, enrico.scholz@informatik.tu-chemnitz.de)
AC_CONFIG_SRCDIR([src/capchroot.c])
AC_CONFIG_HEADER([config.h])

AM_INIT_AUTOMAKE([1.8.3 gnits dist-bzip2 subdir-objects])
AM_MAINTAINER_MODE

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

AC_SUBST(GPG_KEY, "0xFFD316AC53ACA43A!")

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AM_PROG_CC_C_O
ENSC_CXXCOMPILER
ENSC_C99COMPILER

ENSC_SET_SEARCHPATH([$PATH:/sbin:/usr/sbin:/usr/local/sbin])
ENSC_PATHPROG_STANDARD_TOOLS

ENSC_PATHPROG(IP,        ip,,      [Usually, this tool is shipped in the 'iproute' or 'iproute2' package of your distribution])
ENSC_PATHPROG(IPTABLES,  iptables)
ENSC_PATHPROG(MODPROBE,  modprobe)
ENSC_PATHPROG(NAMEIF,    nameif)
ENSC_PATHPROG(NOHUP,     nohup)
ENSC_PATHPROG(RMMOD,     rmmod)
ENSC_PATHPROG(VCONFIG,   vconfig,, [See http://www.candelatech.com/~greear/vlan.html; usually this tool is shipped in the 'vconfig' or 'vlan' package of your distribution])
ENSC_PATHPROG(WGET,      wget)

ENSC_PATHPROG(DOXYGEN,   doxygen,  [:])
ENSC_PATHPROG(XSLTP,     xsltp,    [:])
ENSC_PATHPROG(XSLTPROC,  xsltproc, [:])


AM_CONDITIONAL(HAVE_XSLTP,    test "$XSLTP"    != ':')
AM_CONDITIONAL(HAVE_XSLTPROC, test "$XSLTPROC" != ':')
	

ENSC_CHECK_CC_FLAG([-std=c99 -Wall -pedantic -W])
ENSC_CHECK_CXX_FLAG([-ansi   -Wall -pedantic -W -fmessage-length=0])

AC_MSG_CHECKING([whether to enable extra optimizations])
AC_ARG_ENABLE([extra-optimizations],
	      [AC_HELP_STRING([--disable-extra-optimizations],
			      [disable certain extra optimizations (default: no)])],
	      [case "$enableval" in
		  (yes) use_extra_optimizations=1;;
		  (no)  use_extra_optimizations=;;
                  (*)   AC_MSG_ERROR(['$enableval' is not a valid value for '--disable-extra-optimizations']);;
               esac],
              [use_extra_optimizations=1])

if test x"$use_extra_optimizations" = x; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
	ENSC_CHECK_CC_FLAG([-funit-at-a-time])
	ENSC_CHECK_CXX_FLAG([-funit-at-a-time])
fi

AC_MSG_CHECKING([whether to enable debug-code in library])
AC_ARG_ENABLE([lib-debug],
	      [AC_HELP_STRING([--enable-lib-debug],
                              [enable additional debug code in library (default: no)])],
              [case "$enableval" in
		  (yes) use_lib_debug=1;;
                  (no)  use_lib_debug=;;
                  (*)   AC_MSG_ERROR(['$enableval' is not a valid value for '--enable-lib-debug']);;
               esac],
              [ use_lib_debug= ])

if test x"$use_lib_debug" = x; then
	AC_SUBST(LIB_DEBUG_CPPFLAGS, [-DNDEBUG])
	AC_MSG_RESULT(no)
else
	AC_SUBST(LIB_DEBUG_CPPFLAGS, [])
	AC_MSG_RESULT(yes)
fi

AC_MSG_CHECKING([whether to enable expensive tests])
AC_ARG_ENABLE([expensive-tests],
	      [AC_HELP_STRING([--disable-expensive-tests],
			      [disable tests which might be expensive on some systems (default: no)])],
	      [case "$enableval" in
		 (yes|no)  use_expensive_tests=$enableval;;
		 (*)       AC_MSG_ERROR(['$enableval' is not a valid value for '--disable-expensive-tests']);;
	       esac],
              [ use_expensive_tests=yes ])
AC_MSG_RESULT($use_expensive_tests)

AC_SUBST(ENSC_USE_EXPENSIVE_TESTS, "$use_expensive_tests")


ENSC_CHECK_PERSONALITY_FLAGS

AC_ARG_VAR(CC, [The C compiler])

ENSC_INITRDDIR(initrddir)
ENSC_RELEASE(RELEASE_CPPFLAGS)

dnl ###########################
dnl
dnl {some dietlibc related tests
dnl

case $host_cpu in
	(i*86|athlon)	min_diet_ver=0.25;;
	(ia64|hppa*)	min_diet_ver=0.29;;
	(*)		min_diet_ver=0.28;;
esac

ENSC_ENABLE_DIETLIBC(USE_DIETLIBC, [$min_diet_ver])

if test x"$ensc_have_dietlibc" = xno; then
	AC_MSG_WARN([***                                                         ***])
	AC_MSG_WARN([*** it is strongly recommended to link util-vserver against ***])
	AC_MSG_WARN([*** dietlibc;  glibc's NSS functions are very unreliable in ***])
	AC_MSG_WARN([*** chroot() environments,  so you have to  expect problems ***])
	AC_MSG_WARN([*** there.                                                  ***])
	AC_MSG_WARN([***                                                         ***])
	AM_CONDITIONAL(USE_DIETLIBC_COMPAT, false)
else
	# HACK: libtool does not have cmdline options to build only
	# dynamic libraries; this can be done with the
	# '--disable-static' ./configure option only.  As our static
	# libraries will be build with dietlibc, we have to do set
	# this option which is evaluated by 'AC_PROG_LIBTOOL'
 	# below.  Therefore, this macro must not be called earlier.
	enable_static=no

	ENSC_DIETLIBC_SANITYCHECK
	ENSC_DIETLIBC_NEED_COMPAT(USE_DIETLIBC_COMPAT)
fi

AM_CONDITIONAL(ENSC_USE_DIETLIBC, test x"$ensc_have_dietlibc" = xyes)
AM_CONDITIONAL(ENSC_USE_GLIBC,    true)

# HACK: see comments at 'enable_static' above
AC_PROG_LIBTOOL
dnl
dnl dietlibc stuff ends here}
dnl
dnl ##########################


ENSC_KERNEL_HEADERS(kernelincludedir)
ENSC_UV_VROOTDIR(vserverdir)
ENSC_CHANGELOG([trunk])


dnl ##########################
dnl
dnl {Check whether to use external kernel headers
dnl
AC_MSG_CHECKING([whether to use internal kernel headers])
AC_ARG_ENABLE([internal-headers],
              [AC_HELP_STRING([--disable-internal-headers],
                              [use vserver specific headers from the kernel instead of the shipped versions (default: no)])],
              [case "$enableval" in
	          (yes|no) ;;
	          (*)      AC_MSG_ERROR(['$i' is not a supported value for '--disable-internal-headers']);;
	       esac],
              [enable_internal_headers=yes])

AM_CONDITIONAL(ENSC_ENABLE_INTERNAL_HEADERS, [test x"$enable_internal_headers" = xyes])
AC_MSG_RESULT([$enable_internal_headers])
dnl
dnl the check regarding external kernel headers ends here}
dnl
dnl ##########################

dnl ##########################
dnl
dnl {Check for the APIs to be used
dnl
AC_MSG_CHECKING([for supported APIs])
AC_ARG_ENABLE([apis],
	      [AC_HELP_STRING([--enable-apis=APIS],
			      [enable support for the given apis; possible values are: legacy,compat,v11,v13,fscompat,net,ALL (default: all except 'legacy')])],
              [],
	      [enable_apis=compat,v11,v13,fscompat,net])

test x"$enable_apis" != xALL || enable_apis='legacy,compat,v11,v13,fscompat,net'
enable_api_oldproc=
enable_api_olduts=
old_IFS=$IFS
IFS=,;
for i in $enable_apis; do
	case "$i" in
		(compat)	AC_DEFINE(VC_ENABLE_API_COMPAT,   1, [Enable support for compatibility syscall API])
				enable_api_oldproc=1
				enable_api_olduts=1
				;;
		(legacy) 	AC_DEFINE(VC_ENABLE_API_LEGACY,   1, [Enable support for old, /proc parsing API])
				enable_api_old_proc=1
				enable_api_olduts=1
				;;
		(v11)    	AC_DEFINE(VC_ENABLE_API_V11,      1, [Enable support for API of vserver 1.1.x])
				enable_api_oldproc=1
				enable_api_olduts=1
				;;
		(v13)    	AC_DEFINE(VC_ENABLE_API_V13,      1, [Enable support for API of vserver 1.3.x]);;
		(net)		AC_DEFINE(VC_ENABLE_API_NET,      1, [Enable support for network context API]);;
		(fscompat)	AC_DEFINE(VC_ENABLE_API_FSCOMPAT, 1, [Enable support for filesystem compatibility API]);;
		(*)		AC_MSG_ERROR(['$i' is not a supported API]);;
	esac
done
IFS=$old_IFS
if test x"$enable_api_oldproc" != x; then
	AC_DEFINE(VC_ENABLE_API_OLDPROC, 1, [Enable API for a backward compatible /proc parsing])
	enable_apis="$enable_apis,oldproc"
fi
if test x"$enable_api_olduts" != x; then
	AC_DEFINE(VC_ENABLE_API_OLDUTS, 1, [Enable API for a backward compatible uts handling])
	enable_apis="$enable_apis,olduts"
fi
AC_MSG_RESULT([$enable_apis])
dnl
dnl the check for used APIs ends here}
dnl
dnl ##########################


ENSC_SYSCALLNR(vserver,273)
ENSC_SYSCALL
ENSC_CHECK_EXT2FS_HEADER
AC_CHECK_FUNCS([vserver])
AC_CHECK_DECLS(MS_MOVE,,,[#include <linux/fs.h>])
AC_CHECK_TYPES(xid_t,,,[#include <sys/types.h>])
AC_CHECK_TYPES(nid_t,,,[#include <sys/types.h>])

AC_CHECK_HEADERS([sys/capability.h])


dnl ########################
dnl
dnl {check for beecrypt
dnl
if test x"$ensc_cv_c99_c99compiler" = xyes; then
	ensc_have_beecrypt=yes

	if test x"$ensc_have_beecrypt" = xyes; then
		AC_CHECK_HEADER([beecrypt/beecrypt.h], [ : ],
				[ ensc_have_beecrypt=no ])
	fi
			
	if test x"$ensc_have_beecrypt" = xyes; then
		AC_CHECK_LIB(beecrypt, hashFunctionContextInit, [ : ],
			     [ ensc_have_beecrypt=no ])
	fi

	if test x"$ensc_have_beecrypt" != xyes; then
		AC_MSG_WARN([
****
**** 'beecrypt' could not be found;
**** this will disable the build of 'vhashify'
****])
	fi
else
	ensc_have_beecrypt=no
fi

AM_CONDITIONAL(ENSC_HAVE_BEECRYPT, test x"$ensc_have_beecrypt" = xyes)
AM_CONDITIONAL(ENSC_CAN_BEECRYPT_WITH_DIETLIBC, false)
dnl
dnl beecrypt stuff ends here}
dnl
dnl ########################


dnl BIG HACK! Do some autodetection here!
AC_DEFINE(UTMP_GID, [22], [The utmp gid-number])

if false; then
	AC_DEFINE(HAVE_GROWING_STACK, [1], [Define to 1 if the stack is on growing addresses])
fi

AC_DEFINE(_FILE_OFFSET_BITS, [64], [Use 64bit interface for filesystem operations])

dnl ########################
dnl
dnl {The final info-page
dnl
ensc_cxx_affected=" (affected: vbuild, vcheck)"
ensc_c99_affected=" (affected: vunify, vcopy, vhashify, vdlimit)"
ensc_diet_msg=" (you have been warned)"
ensc_diet_version_msg=" ($ensc_version_dietlibc)"
ensc_diet_compat_msg=" (using -lcompat)"
test x"$ensc_cv_cxx_cxxcompiler"    = xno || ensc_cxx_affected=
test x"$ensc_cv_c99_c99compiler"    = xno || ensc_c99_affected=
test x"$ensc_have_dietlibc"         = xno || ensc_diet_msg=
test x"$ensc_version_dietlibc"     != x   || ensc_diet_version_msg=
test x"$ensc_have_dietlibc$ensc_cv_c_dietlibc_compat" = xyesyes || ensc_diet_compat_msg=

AH_BOTTOM([#include "compat.h"
])
AC_CONFIG_COMMANDS_PRE([
			FEATURES_TXT="\
Features:
		       CC: $CC, $($CC   --version | sed -e '1p;d')
                      CXX: $CXX, $($CXX --version | sed -e '1p;d')
                 CPPFLAGS: '$CPPFLAGS'
                   CFLAGS: '$CFLAGS'
                 CXXFLAGS: '$CXXFLAGS'
               build/host: $build/$host
             Use dietlibc: $ensc_have_dietlibc$ensc_diet_version_msg$ensc_diet_msg$ensc_diet_compat_msg
       Build C++ programs: $ensc_cv_cxx_cxxcompiler$ensc_cxx_affected
       Build C99 programs: $ensc_cv_c99_c99compiler$ensc_c99_affected
           Available APIs: $enable_apis
            ext2fs Source: $ensc_cv_test_ext2fs_header
    syscall(2) invocation: $with_syscall
      vserver(2) syscall#: $ensc_cv_value_syscall_vserver
   
Paths:
                   prefix: $prefix
        sysconf-Directory: $sysconfdir
            cfg-Directory: $sysconfdir/vservers
         initrd-Directory: $initrddir
       pkgstate-Directory: $localstatedir/run/vservers
            Kernelheaders: $kernelincludedir
          vserver-Rootdir: $vserverdir
"
			echo "$FEATURES_TXT" >FEATURES.txt
			])
dnl
dnl final info-page ends here}
dnl
dnl ########################

AC_CONFIG_FILES([util-vserver.spec Makefile distrib/Makefile lib/apidoc/Doxyfile])
AC_OUTPUT

AC_MSG_NOTICE([

$PACKAGE_STRING

$FEATURES_TXT])
